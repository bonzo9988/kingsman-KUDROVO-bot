import logging
from telegram import Update, InputFile
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler
)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
BOT_TOKEN = "8028052304:AAFETr-_12avRBGhc2oj2-woXIyfjof9gE4"  # ‚ö†Ô∏è –ù–µ –ø—É–±–ª–∏–∫—É–π –µ–≥–æ –Ω–∏–≥–¥–µ!
GROUP_CHAT_ID = -1001234567890  # ‚ö†Ô∏è –£–∫–∞–∂–∏ –∑–¥–µ—Å—å –ò–î –≥—Ä—É–ø–ø—ã, –∫—É–¥–∞ –±–æ—Ç –¥–æ–ª–∂–µ–Ω –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ—Ç—á—ë—Ç

# === –ü—É–Ω–∫—Ç—ã —á–µ–∫-–ª–∏—Å—Ç–∞ ===
checklist_items = [
    "–ü—Ä–æ–≤–µ—Ç—Ä–∏—Ç—å –ø–æ–º–µ—â–µ–Ω–∏–µ",
    "–í–∫–ª—é—á–∏—Ç—å –æ—Å–≤–µ—â–µ–Ω–∏–µ –∏ —Ç–µ–ª–µ–≤–∏–∑–æ—Ä (–≤–∏–¥–µ–æ —Å –∫–∞–º–∏–Ω–æ–º)",
    "–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–ª–æ—Ç–µ–Ω—Ü–µ–Ω–∞–≥—Ä–µ–≤–∞—Ç–µ–ª—å –∏ –≤–æ—Å–∫–æ–ø–ª–∞–≤",
    "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞—Å—Ö–æ–¥–Ω–∏–∫–∏ –Ω–∞ —Ä–∞–±–æ—á–∏—Ö –º–µ—Å—Ç–∞—Ö",
    "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–Ω—Ñ–µ—Ç—ã –¥–ª—è –≥–æ—Å—Ç–µ–π",
    "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–ø–∞—Å—ã –≤ ¬´–±–∞—Ä–µ¬ª",
    "–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –∫–æ—Ñ–µ-–º–∞—à–∏–Ω—É",
    "–ü—Ä–æ—Ç–µ—Ä–µ—Ç—å –∑–æ–Ω—É –æ–∂–∏–¥–∞–Ω–∏—è",
    "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç—É–∞–ª–µ—Ç",
    "–ü—Ä–æ—Ç–µ—Ä–µ—Ç—å –∑–µ—Ä–∫–∞–ª–∞ –∏ —Å—Ç–µ–∫–ª–∞",
    "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–ø–∏—Å–∏ –Ω–∞ 3-4 –¥–Ω—è –≤–ø–µ—Ä—ë–¥",
    "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫ –º–∞—Å—Ç–µ—Ä–æ–≤",
    "–ó–∞–ø–æ—Å—Ç–∏—Ç—å —Å—Ç–æ—Ä–∏—Å –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö",
    "–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è / –∑–≤–æ–Ω–∫–∏",
    "–ü—Ä–æ–≤–µ—Å—Ç–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—é"
]

# === –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π ===
ASKING, WAITING_PHOTO = range(2)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['answers'] = []
    context.user_data['step'] = 0
    await update.message.reply_text(f"–ü—Ä–∏–≤–µ—Ç, {update.effective_user.first_name}! –î–∞–≤–∞–π –∑–∞–ø–æ–ª–Ω–∏–º —á–µ–∫-–ª–∏—Å—Ç.")
    await update.message.reply_text(f"{checklist_items[0]}\n\n–û—Ç–≤–µ—Ç—å—Ç–µ: ‚úÖ –∏–ª–∏ ‚ùå")
    return ASKING


async def handle_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    answer = update.message.text.strip()
    if answer not in ["‚úÖ", "‚ùå"]:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ —Å–º–∞–π–ª–∏–∫–æ–º ‚úÖ –∏–ª–∏ ‚ùå")
        return ASKING

    context.user_data['answers'].append(answer)
    context.user_data['step'] += 1

    if context.user_data['step'] >= len(checklist_items):
        await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –≥–æ—Ç–æ–≤–æ–≥–æ –∑–∞–ª–∞ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ /skip, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.")
        return WAITING_PHOTO
    else:
        next_question = checklist_items[context.user_data['step']]
        await update.message.reply_text(f"{next_question}\n\n–û—Ç–≤–µ—Ç—å—Ç–µ: ‚úÖ –∏–ª–∏ ‚ùå")
        return ASKING


async def skip_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await send_report(context, update, photo=None)
    await update.message.reply_text("–û—Ç—á—ë—Ç –±–µ–∑ —Ñ–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
    return ConversationHandler.END


async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    photo_file = await update.message.photo[-1].get_file()
    context.user_data['photo'] = photo_file
    await send_report(context, update, photo=photo_file)
    await update.message.reply_text("–û—Ç—á—ë—Ç —Å —Ñ–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
    return ConversationHandler.END


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ–∫-–ª–∏—Å—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END


async def send_report(context: ContextTypes.DEFAULT_TYPE, update: Update, photo=None):
    user = update.effective_user.first_name
    answers = context.user_data['answers']
    report_lines = [f"üìù *–ß–µ–∫-–ª–∏—Å—Ç –æ—Ç–∫—Ä—ã—Ç–∏—è —Å–º–µ–Ω—ã* –æ—Ç *{user}*\n"]
    for item, answer in zip(checklist_items, answers):
        report_lines.append(f"- {item}: {answer}")
    report_text = "\n".join(report_lines)

    try:
        await context.bot.send_message(chat_id=GROUP_CHAT_ID, text=report_text, parse_mode="Markdown")

        if photo:
            await context.bot.send_photo(chat_id=GROUP_CHAT_ID, photo=photo.file_id)
    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è –û—Ç—á—ë—Ç —Å–æ–∑–¥–∞–Ω, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É. –û—à–∏–±–∫–∞: {e}")


def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            ASKING: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_answer)],
            WAITING_PHOTO: [
                MessageHandler(filters.PHOTO, handle_photo),
                CommandHandler("skip", skip_photo)
            ],
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )

    app.add_handler(conv_handler)

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã /start...")
    app.run_polling()


if __name__ == '__main__':
    main()
